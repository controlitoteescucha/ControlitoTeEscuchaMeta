import { addKeyword } from '@builderbot/bot'
import { appendToSheet } from 'scripts/sheets';
import { formattedTime } from 'scripts/utils';

const spreadsheetId = '1Qa3lBybYHJPYizOxTFS4g87TLOv97lC1BD2-5kg1Y6k';

const rangos = {
    'Ph del agua': { min: 7.2, max: 7.6 },
    'Nivel de cloro libre': { min: 1, max: 3 },
    'Alcalinidad total': { min: 80, max: 120 },
    'Dureza c√°lcica': { min: 200, max: 400 },
    'Cian√∫rico': { min: 30, max: 50 },
    'Turbidez de agua': { min: 0, max: 5 }
};

export const tomaPiscinaFlow = addKeyword('4')
    .addAnswer(`üåä *Medici√≥n de Ph del agua*\n\n` +
        `El rango recomendado para el Ph del agua es:\n` +
        `üîπ M√≠nimo: *${rangos['Ph del agua'].min}*\n` +
        `üîπ M√°ximo: *${rangos['Ph del agua'].max}*\n\n` +
        `¬øEn qu√© rango est√° el valor medido?\n\n` +
        `1Ô∏è‚É£ Menor que ${rangos['Ph del agua'].min} ‚¨áÔ∏è\n` +
        `2Ô∏è‚É£ Entre ${rangos['Ph del agua'].min} y ${rangos['Ph del agua'].max} ‚úÖ\n` +
        `3Ô∏è‚É£ Mayor que ${rangos['Ph del agua'].max} ‚¨ÜÔ∏è`, 
        { capture: true }, async(ctx, ctxFn) => {
            const opcionesValidas = ["1", "2", "3"];
            if (!opcionesValidas.includes(ctx.body)) {
                return ctxFn.fallBack("‚ùå *Opci√≥n no v√°lida.* Por favor, elige una opci√≥n del 1 al 3.");
            }

            let accion = 'Mantener'; // Acci√≥n por defecto
            let rangoToma = '';
            await ctxFn.state.update({ phAgua: 'Ph del agua' });

            switch (ctx.body) {
                case '1': // Menor que el m√≠nimo
                    rangoToma = `Menor que ${rangos['Ph del agua'].min} ‚¨áÔ∏è`;
                    accion = 'Aumentar üìà';
                    break;
                case '2': // Entre el m√≠nimo y el m√°ximo
                    rangoToma = `Entre ${rangos['Ph del agua'].min} y ${rangos['Ph del agua'].max} ‚úÖ`;
                    accion = 'Mantener üü¢';
                    break;
                case '3': // Mayor que el m√°ximo
                    rangoToma = `Mayor que ${rangos['Ph del agua'].max} ‚¨ÜÔ∏è`;
                    accion = 'Disminuir üìâ';
                    break;
            }

            const userInfo = ctxFn.state.getMyState();
            await appendToSheet([ 
                [
                    formattedTime, 
                    userInfo.conjunto, 
                    ctx.from, 
                    userInfo.nombreCompleto,
                    userInfo.phAgua,
                    rangoToma,
                    accion
                ]
            ], spreadsheetId , userInfo.conjunto);
        }
    )
    .addAnswer(`üß™ *Medici√≥n de Nivel de cloro libre*\n\n` +
        `El rango recomendado para el Nivel de cloro libre es:\n` +
        `üîπ M√≠nimo: *${rangos['Nivel de cloro libre'].min}*\n` +
        `üîπ M√°ximo: *${rangos['Nivel de cloro libre'].max}*\n\n` +
        `¬øEn qu√© rango est√° el valor medido?\n\n` +
        `1Ô∏è‚É£ Menor que ${rangos['Nivel de cloro libre'].min} ‚¨áÔ∏è\n` +
        `2Ô∏è‚É£ Entre ${rangos['Nivel de cloro libre'].min} y ${rangos['Nivel de cloro libre'].max} ‚úÖ\n` +
        `3Ô∏è‚É£ Mayor que ${rangos['Nivel de cloro libre'].max} ‚¨ÜÔ∏è`, 
        { capture: true }, async(ctx, ctxFn) => {
            const opcionesValidas = ["1", "2", "3"];
            if (!opcionesValidas.includes(ctx.body)) {
                return ctxFn.fallBack("‚ùå *Opci√≥n no v√°lida.* Por favor, elige una opci√≥n del 1 al 3.");
            }

            let accion = 'Mantener'; // Acci√≥n por defecto
            let rangoToma = '';
            await ctxFn.state.update({ cloroLibre: 'Nivel de cloro libre' });

            switch (ctx.body) {
                case '1': // Menor que el m√≠nimo
                    rangoToma = `Menor que ${rangos['Nivel de cloro libre'].min} ‚¨áÔ∏è`;
                    accion = 'Aumentar üìà';
                    break;
                case '2': // Entre el m√≠nimo y el m√°ximo
                    rangoToma = `Entre ${rangos['Nivel de cloro libre'].min} y ${rangos['Nivel de cloro libre'].max} ‚úÖ`;
                    accion = 'Mantener üü¢';
                    break;
                case '3': // Mayor que el m√°ximo
                    rangoToma = `Mayor que ${rangos['Nivel de cloro libre'].max} ‚¨ÜÔ∏è`;
                    accion = 'Disminuir üìâ';
                    break;
            }

            const userInfo = ctxFn.state.getMyState();
            await appendToSheet([ 
                [
                    formattedTime, 
                    userInfo.conjunto, 
                    ctx.from, 
                    userInfo.nombreCompleto,
                    userInfo.cloroLibre,
                    rangoToma,
                    accion
                ]
            ], spreadsheetId , userInfo.conjunto);
        }
    )
    .addAnswer(`üßº *Medici√≥n de Alcalinidad total*\n\n` +
        `El rango recomendado para la Alcalinidad total es:\n` +
        `üîπ M√≠nimo: *${rangos['Alcalinidad total'].min}*\n` +
        `üîπ M√°ximo: *${rangos['Alcalinidad total'].max}*\n\n` +
        `¬øEn qu√© rango est√° el valor medido?\n\n` +
        `1Ô∏è‚É£ Menor que ${rangos['Alcalinidad total'].min} ‚¨áÔ∏è\n` +
        `2Ô∏è‚É£ Entre ${rangos['Alcalinidad total'].min} y ${rangos['Alcalinidad total'].max} ‚úÖ\n` +
        `3Ô∏è‚É£ Mayor que ${rangos['Alcalinidad total'].max} ‚¨ÜÔ∏è`, 
        { capture: true }, async(ctx, ctxFn) => {
            const opcionesValidas = ["1", "2", "3"];
            if (!opcionesValidas.includes(ctx.body)) {
                return ctxFn.fallBack("‚ùå *Opci√≥n no v√°lida.* Por favor, elige una opci√≥n del 1 al 3.");
            }

            let accion = 'Mantener'; // Acci√≥n por defecto
            let rangoToma = '';
            await ctxFn.state.update({ alcalinidad: 'Alcalinidad total' });

            switch (ctx.body) {
                case '1': // Menor que el m√≠nimo
                    rangoToma = `Menor que ${rangos['Alcalinidad total'].min} ‚¨áÔ∏è`;
                    accion = 'Aumentar üìà';
                    break;
                case '2': // Entre el m√≠nimo y el m√°ximo
                    rangoToma = `Entre ${rangos['Alcalinidad total'].min} y ${rangos['Alcalinidad total'].max} ‚úÖ`;
                    accion = 'Mantener üü¢';
                    break;
                case '3': // Mayor que el m√°ximo
                    rangoToma = `Mayor que ${rangos['Alcalinidad total'].max} ‚¨ÜÔ∏è`;
                    accion = 'Disminuir üìâ';
                    break;
            }

            const userInfo = ctxFn.state.getMyState();
            await appendToSheet([ 
                [
                    formattedTime, 
                    userInfo.conjunto, 
                    ctx.from, 
                    userInfo.nombreCompleto,
                    userInfo.alcalinidad,
                    rangoToma,
                    accion
                ]
            ], spreadsheetId , userInfo.conjunto);
        }
    )
    .addAnswer(`üíß *Medici√≥n de Dureza c√°lcica*\n\n` +
        `El rango recomendado para la Dureza c√°lcica es:\n` +
        `üîπ M√≠nimo: *${rangos['Dureza c√°lcica'].min}*\n` +
        `üîπ M√°ximo: *${rangos['Dureza c√°lcica'].max}*\n\n` +
        `¬øEn qu√© rango est√° el valor medido?\n\n` +
        `1Ô∏è‚É£ Menor que ${rangos['Dureza c√°lcica'].min} ‚¨áÔ∏è\n` +
        `2Ô∏è‚É£ Entre ${rangos['Dureza c√°lcica'].min} y ${rangos['Dureza c√°lcica'].max} ‚úÖ\n` +
        `3Ô∏è‚É£ Mayor que ${rangos['Dureza c√°lcica'].max} ‚¨ÜÔ∏è`, 
        { capture: true }, async(ctx, ctxFn) => {
            const opcionesValidas = ["1", "2", "3"];
            if (!opcionesValidas.includes(ctx.body)) {
                return ctxFn.fallBack("‚ùå *Opci√≥n no v√°lida.* Por favor, elige una opci√≥n del 1 al 3.");
            }

            let accion = 'Mantener'; // Acci√≥n por defecto
            let rangoToma = '';
            await ctxFn.state.update({ durezaCalcica: 'Dureza c√°lcica' });

            switch (ctx.body) {
                case '1': // Menor que el m√≠nimo
                    rangoToma = `Menor que ${rangos['Dureza c√°lcica'].min} ‚¨áÔ∏è`;
                    accion = 'Aumentar üìà';
                    break;
                case '2': // Entre el m√≠nimo y el m√°ximo
                    rangoToma = `Entre ${rangos['Dureza c√°lcica'].min} y ${rangos['Dureza c√°lcica'].max} ‚úÖ`;
                    accion = 'Mantener üü¢';
                    break;
                case '3': // Mayor que el m√°ximo
                    rangoToma = `Mayor que ${rangos['Dureza c√°lcica'].max} ‚¨ÜÔ∏è`;
                    accion = 'Disminuir üìâ';
                    break;
            }

            const userInfo = ctxFn.state.getMyState();
            await appendToSheet([ 
                [
                    formattedTime, 
                    userInfo.conjunto, 
                    ctx.from, 
                    userInfo.nombreCompleto,
                    userInfo.durezaCalcica,
                    rangoToma,
                    accion
                ]
            ], spreadsheetId , userInfo.conjunto);
        }
    )
    .addAnswer(`‚ò£Ô∏è *Medici√≥n de Cian√∫rico*\n\n` +
        `El rango recomendado para el Cian√∫rico es:\n` +
        `üîπ M√≠nimo: *${rangos['Cian√∫rico'].min}*\n` +
        `üîπ M√°ximo: *${rangos['Cian√∫rico'].max}*\n\n` +
        `¬øEn qu√© rango est√° el valor medido?\n\n` +
        `1Ô∏è‚É£ Menor que ${rangos['Cian√∫rico'].min} ‚¨áÔ∏è\n` +
        `2Ô∏è‚É£ Entre ${rangos['Cian√∫rico'].min} y ${rangos['Cian√∫rico'].max} ‚úÖ\n` +
        `3Ô∏è‚É£ Mayor que ${rangos['Cian√∫rico'].max} ‚¨ÜÔ∏è`, 
        { capture: true }, async(ctx, ctxFn) => {
            const opcionesValidas = ["1", "2", "3"];
            if (!opcionesValidas.includes(ctx.body)) {
                return ctxFn.fallBack("‚ùå *Opci√≥n no v√°lida.* Por favor, elige una opci√≥n del 1 al 3.");
            }

            let accion = 'Mantener'; // Acci√≥n por defecto
            let rangoToma = '';
            await ctxFn.state.update({ cianurico: 'Cian√∫rico' });

            switch (ctx.body) {
                case '1': // Menor que el m√≠nimo
                    rangoToma = `Menor que ${rangos['Cian√∫rico'].min} ‚¨áÔ∏è`;
                    accion = 'Aumentar üìà';
                    break;
                case '2': // Entre el m√≠nimo y el m√°ximo
                    rangoToma = `Entre ${rangos['Cian√∫rico'].min} y ${rangos['Cian√∫rico'].max} ‚úÖ`;
                    accion = 'Mantener üü¢';
                    break;
                case '3': // Mayor que el m√°ximo
                    rangoToma = `Mayor que ${rangos['Cian√∫rico'].max} ‚¨ÜÔ∏è`;
                    accion = 'Botar agua';
                    break;
            }

            const userInfo = ctxFn.state.getMyState();
            await appendToSheet([ 
                [
                    formattedTime, 
                    userInfo.conjunto, 
                    ctx.from, 
                    userInfo.nombreCompleto,
                    userInfo.cianurico,
                    rangoToma,
                    accion
                ]
            ], spreadsheetId , userInfo.conjunto);
        }
    )
    .addAnswer(`üå´Ô∏è *Medici√≥n de Turbidez de agua*\n\n` +
        `El rango recomendado para la Turbidez de agua es:\n` +
        `üîπ M√≠nimo: *${rangos['Turbidez de agua'].min}*\n` +
        `üîπ M√°ximo: *${rangos['Turbidez de agua'].max}*\n\n` +
        `¬øEn qu√© rango est√° el valor medido?\n\n` +
        `1Ô∏è‚É£ Menor que ${rangos['Turbidez de agua'].min} ‚¨áÔ∏è\n` +
        `2Ô∏è‚É£ Entre ${rangos['Turbidez de agua'].min} y ${rangos['Turbidez de agua'].max} ‚úÖ\n` +
        `3Ô∏è‚É£ Mayor que ${rangos['Turbidez de agua'].max} ‚¨ÜÔ∏è`, 
        { capture: true }, async(ctx, ctxFn) => {
            const opcionesValidas = ["1", "2", "3"];
            if (!opcionesValidas.includes(ctx.body)) {
                return ctxFn.fallBack("‚ùå *Opci√≥n no v√°lida.* Por favor, elige una opci√≥n del 1 al 3.");
            }

            let accion = 'Mantener'; // Acci√≥n por defecto
            let rangoToma = '';
            await ctxFn.state.update({ turbidez: 'Turbidez de agua' });

            switch (ctx.body) {
                case '1': // Menor que el m√≠nimo
                    rangoToma = `Menor que ${rangos['Turbidez de agua'].min} ‚¨áÔ∏è`;
                    accion = 'Aumentar üìà';
                    break;
                case '2': // Entre el m√≠nimo y el m√°ximo
                    rangoToma = `Entre ${rangos['Turbidez de agua'].min} y ${rangos['Turbidez de agua'].max} ‚úÖ`;
                    accion = 'Mantener üü¢';
                    break;
                case '3': // Mayor que el m√°ximo
                    rangoToma = `Mayor que ${rangos['Turbidez de agua'].max} ‚¨ÜÔ∏è`;
                    accion = 'Clarificar';
                    break;
            }

            const userInfo = ctxFn.state.getMyState();
            await appendToSheet([ 
                [
                    formattedTime, 
                    userInfo.conjunto, 
                    ctx.from, 
                    userInfo.nombreCompleto,
                    userInfo.turbidez,
                    rangoToma,
                    accion
                ]
            ], spreadsheetId , userInfo.conjunto);

            ctxFn.flowDynamic('¬°Muchas gracias! üåü\nLos datos han sido registrados con √©xito. üéâ');
            ctxFn.endFlow();
        }
    );